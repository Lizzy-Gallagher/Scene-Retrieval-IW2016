#!/usr/bin/perl
use strict vars;

## Template run_job from Professor Tom Funkhouser

########################################################################

# Get conf file
my $cwd = `pwd`; chomp($cwd);
my $name = substr($cwd, rindex($cwd, '/')+1);
my $conf_file = "results/${name}_ours.conf";
if (!(-e $conf_file)) { die "No conf file\n"; }

# Create output directory
my $output_directory = "output";
if (!(-d $output_directory)) { `mkdir -p $output_directory`; }

########################################################################

# Stuff to run commands via bat files

my $pid = getppid();
my $hostname = `hostname`; chomp($hostname);
my $cmd_bat_file = "${output_directory}/cmd.bat";
my $cmd_log_file = "${output_directory}/cmd.txt";
my $cmd_err_file = "${output_directory}/cmd.err";

sub StartCommands {
  $cmd_bat_file = $_[0];
  `rm -f $cmd_bat_file`;
  `echo "#!/bin/bash" > $cmd_bat_file`;
}

sub RunCommand {
  `echo "$_[0]" >> $cmd_bat_file`;
}

sub StopCommands {
  if ($hostname eq "head.ionic.cs.princeton.edu") {
    `sbatch --workdir="$cwd" --output="$cmd_log_file" --error="$cmd_err_file" $cmd_bat_file`;
  }
  else {
    `bash $cmd_bat_file`;
  }
}


########################################################################

# Process

foreach my $category ( `cat category_list.txt`) {
  my $output_file = "${output_directory}/${category}.txt";
  my $log_file = "${output_directory}/${category}.log";
  my $bat_file = "${output_directory}/${category}.bat";
  my $lock_file = "${output_directory}/${category}.lck";

# Check if already have created files
if (-e $output_file) { exit; }

# Check if locked by another process
if (-e $lock_file) { exit; }
`echo $pid > $lock_file`; `sync`;
my $pid_check = `cat $lock_file`;
chomp($pid_check);
if ($pid ne $pid_check) { exit; }

# Start commands
StartCommands($bat_file);
RunCommand("echo START > $log_file");
RunCommand("date >> $log_file");

# RUN YOUR PROGRAM HERE
if (!(-e $output_file)) {
  print "Creating $output_file ...\n";
  RunCommand("/u/funk/gaps/bin/x86_64/rgbd2output $conf_file $output_file $full_ssb_file -omit_corners -create_hierarchy -max_depth 0 -v >> $log_file");
}

# Stop commands
RunCommand("echo DONE >> $log_file");
RunCommand("date >> $log_file");
RunCommand("rm -f $lock_file");
StopCommands();
